name: Create Company Image

on:
  workflow_dispatch:
     inputs:
      branch_name:
        description: 'Branch Name'
        required: true
      frappe_branch_name:
        description: 'Frappe Branch Name'
        required: true
        default: version-14
      docker_repository:
        description: 'Docker Image Repository'
        required: true
      apps_template_json:
        description: 'Apps Json Template File'
        required: false
      apps_raw_json:
        description: 'Apps Json Raw'
        required: false
      keygen_account:
        description: 'Keygen Account Id'
      container_file:
        description: 'Docker File used to build image'
        default: "./Containerfile"
      use_cache:
        description: 'Use Cache'
        type: boolean

jobs:
  Build-Image:
    runs-on: ${{ vars.BUILD_IMAGE_RUNNER }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        # with:
          # repository: fintechsys/remittance_image_builder
          # ref: master
          # path: remittance_image_builder
          # submodules: 'recursive' # This checks out all submodules recursively
      # - uses: docker/login-action@v1
      #   with:
      #     registry: harbor.fintechsys.net
      #     username: robot$208
      #     password: QldhOtE5WH6euyL65C6cQGjDXP6ETjW0
          
        #cd ~/remittance_image_builder
      - name: build image
        run: | 
          # git clone --recursive https://${{ secrets.org_token }}@github.com/fintechsys/remittance_image_builder.git
          # cd remittance_image_builder
          CACHE=""
          CONTAINER_FILE=""
          if ${{ inputs.use_cache }} ; then
              CACHE="--cache"
          fi
          
          if [ -n "${{ inputs.container_file }}" ] ; then
            CONTAINER_FILE="--container-file=${{ inputs.container_file }}"
          fi
          
          if [ -n "${{ inputs.apps_template_json }}" ] ; then
            APPS_JSON=$(cat "${{ inputs.apps_template_json }}")
          elif [ -n "${{ inputs.apps_raw_json }}" ] ; then 
            APPS_JSON="${{ inputs.apps_raw_json }}"
          fi
          
          if [ -z "$APPS_JSON" ] ; then
            echo "Set JSON FILE or JSON DATA"
            exit 32
          fi
          
          ./build_image.sh --apps-json="$APPS_JSON" \
          --tag="${{ inputs.docker_repository }}:latest" \
          --frappe-path="https://github.com/frappe/frappe.git" --frappe-branch="${{ inputs.frappe_branch_name }}" \
          --node-version=18.0.0 \
          --keygen-account="${{ inputs.keygen_account }}"
          
      # - name: push to harbor
      #   run: |
      #     docker push ${{ inputs.docker_repository }}:latest

      # - name: remove image
      #   run: |
      #     docker image remove --force ${{ inputs.docker_repository }}:latest
